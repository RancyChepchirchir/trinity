library(jsonlite)
library(ggplot2)
library(MCMCpack)
#read the file
json_file <- stream_in(file("data/Business_Toronto_Restaurant.json"))
#select data
data = json_file[json_file$neighborhood == "Etobicoke"|json_file$neighborhood == "Scarborough",]
#read the file
json_file <- stream_in(file("data/Business_Toronto_Restaurant.json"))
#select data
data = json_file[json_file$neighborhood == "Etobicoke"|json_file$neighborhood == "Scarborough",]
#x2 = json_file[,]
#data = rbind(x1,x2)
data = data[data$is_open == 1,]
data1 = data[grepl("Indian",data$categories)==TRUE,]
data_compare = data1[c("business_id","name","stars","review_count","neighborhood")]
data_compare$neighborhood[data_compare$neighborhood == "Etobicoke"] = 1
data_compare$neighborhood[data_compare$neighborhood == "Scarborough"] = 2
#First Part
#creating a box plot
ggplot(data_compare) + geom_boxplot(aes(neighborhood, stars, fill = neighborhood)) + geom_jitter(aes(neighborhood, stars, shape = data_compare$neighborhood))
# Checking the mean, median and sd of the data
mean = tapply(data_compare$stars, data_compare$neighborhood, mean)
tapply(data_compare$stars, data_compare$neighborhood, median)
sd = tapply(data_compare$stars, data_compare$neighborhood, sd)
#t test
t.test(stars ~ neighborhood, data=data_compare, var.equal = TRUE)
#Compare the means
b0 = (2.5 / (1.25^2))
a0 = b0*2.5
compare_2_gibbs <- function(y, ind, mu0 = 2.5, tau0 = 1/(1.25^2), del0 = 0, gamma0 = 1/(1.25^2), a0 = 4, b0 = 1.6, maxiter = 5000)
{
y1 <- y[ind == 1]
y2 <- y[ind == 2]
n1 <- length(y1)
n2 <- length(y2)
##### starting values
mu <- (mean(y1) + mean(y2)) / 2
del <- (mean(y1) - mean(y2)) / 2
mat_store <- matrix(0, nrow = maxiter, ncol = 3)
#####
##### Gibbs sampler
an <- a0 + (n1 + n2)/2
for(s in 1 : maxiter)
{
##update tau
bn <- b0 + 0.5 * (sum((y1 - mu - del) ^ 2) + sum((y2 - mu + del) ^ 2))
tau <- rgamma(1, an, bn)
##
##update mu
taun <-  tau0 + tau * (n1 + n2)
mun <- (tau0 * mu0 + tau * (sum(y1 - del) + sum(y2 + del))) / taun
mu <- rnorm(1, mun, sqrt(1/taun))
##
##update del
gamman <-  gamma0 + tau*(n1 + n2)
deln <- ( del0 * gamma0 + tau * (sum(y1 - mu) - sum(y2 - mu))) / gamman
del<-rnorm(1, deln, sqrt(1/gamman))
##
## store parameter values
mat_store[s, ] <- c(mu, del, tau)
}
colnames(mat_store) <- c("mu", "del", "tau")
return(mat_store)
}
y1 <- y[ind == 1]
y2 <- y[ind == 2]
n1 <- length(y1)
n2 <- length(y2)
##### starting values
mu <- (mean(y1) + mean(y2)) / 2
del <- (mean(y1) - mean(y2)) / 2
mat_store <- matrix(0, nrow = maxiter, ncol = 3)
##### Gibbs sampler
an <- a0 + (n1 + n2)/2
for(s in 1 : maxiter)
{
##update tau
bn <- b0 + 0.5 * (sum((y1 - mu - del) ^ 2) + sum((y2 - mu + del) ^ 2))
tau <- rgamma(1, an, bn)
##
##update mu
taun <-  tau0 + tau * (n1 + n2)
mun <- (tau0 * mu0 + tau * (sum(y1 - del) + sum(y2 + del))) / taun
mu <- rnorm(1, mun, sqrt(1/taun))
##
##update del
gamman <-  gamma0 + tau*(n1 + n2)
deln <- ( del0 * gamma0 + tau * (sum(y1 - mu) - sum(y2 - mu))) / gamman
del<-rnorm(1, deln, sqrt(1/gamman))
##
## store parameter values
mat_store[s, ] <- c(mu, del, tau)
}
##update tau
bn <- b0 + 0.5 * (sum((y1 - mu - del) ^ 2) + sum((y2 - mu + del) ^ 2))
tau <- rgamma(1, an, bn)
##update mu
taun <-  tau0 + tau * (n1 + n2)
mun <- (tau0 * mu0 + tau * (sum(y1 - del) + sum(y2 + del))) / taun
mu <- rnorm(1, mun, sqrt(1/taun))
##update del
gamman <-  gamma0 + tau*(n1 + n2)
deln <- ( del0 * gamma0 + tau * (sum(y1 - mu) - sum(y2 - mu))) / gamman
del<-rnorm(1, deln, sqrt(1/gamman))
## store parameter values
mat_store[s, ] <- c(mu, del, tau)
colnames(mat_store) <- c("mu", "del", "tau")
return(mat_store)
compare_2_gibbs <- function(y, ind, mu0 = 2.5, tau0 = 1/(1.25^2), del0 = 0, gamma0 = 1/(1.25^2), a0 = 4, b0 = 1.6, maxiter = 5000)
{
y1 <- y[ind == 1]
y2 <- y[ind == 2]
n1 <- length(y1)
n2 <- length(y2)
##### starting values
mu <- (mean(y1) + mean(y2)) / 2
del <- (mean(y1) - mean(y2)) / 2
mat_store <- matrix(0, nrow = maxiter, ncol = 3)
#####
##### Gibbs sampler
an <- a0 + (n1 + n2)/2
for(s in 1 : maxiter)
{
##update tau
bn <- b0 + 0.5 * (sum((y1 - mu - del) ^ 2) + sum((y2 - mu + del) ^ 2))
tau <- rgamma(1, an, bn)
##
##update mu
taun <-  tau0 + tau * (n1 + n2)
mun <- (tau0 * mu0 + tau * (sum(y1 - del) + sum(y2 + del))) / taun
mu <- rnorm(1, mun, sqrt(1/taun))
##
##update del
gamman <-  gamma0 + tau*(n1 + n2)
deln <- ( del0 * gamma0 + tau * (sum(y1 - mu) - sum(y2 - mu))) / gamman
del<-rnorm(1, deln, sqrt(1/gamman))
##
## store parameter values
mat_store[s, ] <- c(mu, del, tau)
}
colnames(mat_store) <- c("mu", "del", "tau")
return(mat_store)
}
# burn in and thinning
fit <- compare_2_gibbs(data_compare$stars, as.factor(data_compare$neighborhood))
plot(as.mcmc(fit))
raftery.diag(as.mcmc(fit))
#posterior mean and sd
apply(fit, 2, mean)
apply(fit, 2, sd)
# to interperate tau we convert it to sd
mean(1/sqrt(fit[, 3]))
sd(1/sqrt(fit[, 3]))
# calculating probablilty
y1_sim <- rnorm(5000, fit[, 1] + fit[, 2], sd = 1/sqrt(fit[, 3]))
y2_sim <- rnorm(5000, fit[, 1] - fit[, 2], sd = 1/sqrt(fit[, 3]))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff)) scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff)) +scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
count_rom <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
count_rom + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
count_rom <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim))
count_rom + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
# calculating probablilty
y1_sim <- rnorm(5000, fit[, 1] + fit[, 2], sd = 1/sqrt(fit[, 3]))
y2_sim <- rnorm(5000, fit[, 1] - fit[, 2], sd = 1/sqrt(fit[, 3]))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
(ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff)) ) + scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
mean(y1_sim > y2_sim)
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0)
library(jsonlite)
library(ggplot2)
library(MCMCpack)
#read the file
json_file <- stream_in(file("data/Business_Toronto_Restaurant.json"))
#select data
data = json_file[json_file$neighborhood == "Etobicoke"|json_file$neighborhood == "Scarborough",]
#x2 = json_file[,]
#data = rbind(x1,x2)
data = data[data$is_open == 1,]
data1 = data[grepl("Indian",data$categories)==TRUE,]
data_compare = data1[c("business_id","name","stars","review_count","neighborhood")]
data_compare$neighborhood[data_compare$neighborhood == "Etobicoke"] = 1
data_compare$neighborhood[data_compare$neighborhood == "Scarborough"] = 2
#First Part
#creating a box plot
ggplot(data_compare) + geom_boxplot(aes(neighborhood, stars, fill = neighborhood)) + geom_jitter(aes(neighborhood, stars, shape = data_compare$neighborhood))
# Checking the mean, median and sd of the data
mean = tapply(data_compare$stars, data_compare$neighborhood, mean)
tapply(data_compare$stars, data_compare$neighborhood, median)
sd = tapply(data_compare$stars, data_compare$neighborhood, sd)
#t test
t.test(stars ~ neighborhood, data=data_compare, var.equal = TRUE)
#Compare the means
b0 = (2.5 / (1.25^2))
a0 = b0*2.5
compare_2_gibbs <- function(y, ind, mu0 = 2.5, tau0 = 1/(1.25^2), del0 = 0, gamma0 = 1/(1.25^2), a0 = 4, b0 = 1.6, maxiter = 5000)
{
y1 <- y[ind == 1]
y2 <- y[ind == 2]
n1 <- length(y1)
n2 <- length(y2)
##### starting values
mu <- (mean(y1) + mean(y2)) / 2
del <- (mean(y1) - mean(y2)) / 2
mat_store <- matrix(0, nrow = maxiter, ncol = 3)
#####
##### Gibbs sampler
an <- a0 + (n1 + n2)/2
for(s in 1 : maxiter)
{
##update tau
bn <- b0 + 0.5 * (sum((y1 - mu - del) ^ 2) + sum((y2 - mu + del) ^ 2))
tau <- rgamma(1, an, bn)
##
##update mu
taun <-  tau0 + tau * (n1 + n2)
mun <- (tau0 * mu0 + tau * (sum(y1 - del) + sum(y2 + del))) / taun
mu <- rnorm(1, mun, sqrt(1/taun))
##
##update del
gamman <-  gamma0 + tau*(n1 + n2)
deln <- ( del0 * gamma0 + tau * (sum(y1 - mu) - sum(y2 - mu))) / gamman
del<-rnorm(1, deln, sqrt(1/gamman))
##
## store parameter values
mat_store[s, ] <- c(mu, del, tau)
}
colnames(mat_store) <- c("mu", "del", "tau")
return(mat_store)
}
# burn in and thinning
fit <- compare_2_gibbs(data_compare$stars, as.factor(data_compare$neighborhood))
plot(as.mcmc(fit))
raftery.diag(as.mcmc(fit))
#posterior mean and sd
apply(fit, 2, mean)
# to interperate tau we convert it to sd
mean(1/sqrt(fit[, 3]))
# to interperate tau we convert it to sd
mean(1/sqrt(fit[, 3]))
apply(fit, 2, sd)
# calculating probablilty
y1_sim <- rnorm(5000, fit[, 1] + fit[, 2], sd = 1/sqrt(fit[, 3]))
y2_sim <- rnorm(5000, fit[, 1] - fit[, 2], sd = 1/sqrt(fit[, 3]))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim))+
geom_histogram(color="black", fill="white") + stat_bin(aes(y_sim_diff))
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim))
p + stat_bin(aes(y_sim_diff))
p
p + geom_histogram(color="black", fill="white")
p + geom_histogram(color="black", fill="white")
p + geom_histogram(color="black", fill="white")
p + geom_histogram(color="black", fill="white")
p + stat_bin(aes(y_sim_diff))
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) +geom_histogram(color="black", fill="white")
p + stat_bin(aes(y_sim_diff))
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
p
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(x=y_sim_diff))
p
p
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(x=y_sim_diff))
p
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(x=y_sim_diff)) + geom_histogram(color="darkblue", fill="lightblue")
p
p <- ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim), aes(x=y_sim_diff)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim), aes(x=y_sim_diff)) + stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim), aes(x=y_sim_diff)) +geom_histogram(color="black", fill="white")+ stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim), aes(x=y_sim_diff)) +geom_histogram(color="black", fill="white")+ stat_bin(aes(y_sim_diff))
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim), aes(x=y_sim_diff)) + stat_bin(aes(y_sim_diff)) +geom_histogram(color="black", fill="white")
ggplot(data.frame(y_sim_diff = y1_sim - y2_sim), aes(x=y_sim_diff)) + stat_bin(aes(y_sim_diff)) +geom_histogram(color="blue", fill="white")
mean(y1_sim > y2_sim)
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0)
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0) + geom_point(color='darkblue')
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(color='darkblue',aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0)
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(color='darkblue',fill="white",aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0)
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(color='#7fc97f',fill="white",aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0)
ggplot(data.frame(y1_sim, y2_sim)) + geom_point(color='#8dd3c7',fill="white",aes(y1_sim, y2_sim), alpha = 0.3) + geom_abline(slope = 1, intercept = 0)
# how much better?
(mean(y2_sim) - mean(y1_sim))
#First Part end
#Second Part
#Data preparation
data_multi = json_file[json_file$is_open == 1,]
data_multi_test_1 = data_multi[!data_multi$neighborhood=="",]
data_multi_test_1 = data_multi_test_1[!row.names(data_multi_test_1)%in%c("219","2637"),]
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=TRUE)
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=TRUE)
FALSE
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) +scale_fill_brewer(palette="Dark2")
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) +scale_fill_brewer(palette="BrBG")
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) +scale_fill_gradient(low="blue", high="red")
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) +scale_color_gradientn(colours = rainbow(5))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) +scale_color_gradientn(colours = rainbow(7))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) +scale_color_gradientn(colours = rainbow(3))
Dark2
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) + colorRampPalette(scale_fill_brewer(palette="Dark2"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) + getPalette
colourCount = length(unique(mtcars$hp))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colourCount = length(data_multi)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
install.packages("RColorBrewer")
library(RColorBrewer)
colourCount = length(data_multi)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) + getPalette
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = getPalette(colourCount), show.legend=FALSE)
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = getPalette(colourCount), show.legend=FALSE)
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) + scale_color_brewer(palette="Dark2")
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE) + scale_color_brewer(palette="Dark2")
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  + scale_fill_brewer(palette="Dark2")
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  + scale_fill_brewer(getPalette)
getPalette = colorRampPalette(brewer.pal(72, "Set1"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  + scale_fill_brewer(getPalette)
getPalette = colorRampPalette(brewer.pal(72, "Dark2"))
e
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  + scale_fill_brewer(getPalette)
getPalette = getPalette = colorRampPalette(brewer.pal(9, "Set1"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  +   scale_fill_manual(values = getPalette(colourCount))
getPalette = getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colorCount = 72
getPalette = getPalette = colorRampPalette(brewer.pal(9, "Set1"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  +   scale_fill_manual(values = getPalette(colourCount))
getPalette = getPalette = colorRampPalette(brewer.pal(70, "Set1"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  +   scale_fill_manual(values = getPalette(colourCount))
getPalette = getPalette = colorRampPalette(brewer.pal(70, "Accent"))
getPalette = getPalette = colorRampPalette(brewer.pal(12, "Accent"))
#plotting levels
ggplot(data_multi) + geom_boxplot(aes(x = reorder(neighborhood, stars, median), stars, fill = reorder(neighborhood, stars, median)), show.legend=FALSE)  +   scale_fill_manual(values = getPalette(colourCount))
library(jsonlite)
library(ggplot2)
library(mclust)
#read the file
json_file <- stream_in(file("Business_Toronto_Restaurant.json"))
#first part
length(unique(json_file$neighborhood))
# selecting relevant data
d_name = c("longitude","latitude")
data = json_file[,d_name]
plot(data)
# fitting a two parameters model
fit2 <- Mclust(data, G = 8, modelNames = "VVV")
fit2$parameters$pro
fit2$parameters$mean
#plotting the classification
plot(fit2, what = "classification")
#plotting the uncertainity
plot(fit2, what = "uncertainty")
#multiple class
fit_data <- Mclust(data, G = 1:10)
plot(fit_data, what = "BIC")
fit_data$BIC
